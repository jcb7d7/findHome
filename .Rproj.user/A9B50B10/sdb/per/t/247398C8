{
    "collab_server" : "",
    "contents" : "library(shinydashboard)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(curl) # make the jsonlite suggested dependency explicit\n\n# 1=South, 2=East, 3=West, 4=North\ndirColors <-c(\"1\"=\"#595490\", \"2\"=\"#527525\", \"3\"=\"#A93F35\", \"4\"=\"#BA48AA\")\n\n# Download data from the Twin Cities Metro Transit API\n# http://svc.metrotransit.org/NexTrip/help\ngetMetroData <- function(path) {\n  url <- paste0(\"http://svc.metrotransit.org/NexTrip/\", path, \"?format=json\")\n  jsonlite::fromJSON(url)\n}\n\n# Load static trip and shape data\ntrips  <- readRDS(\"metrotransit-data/rds/trips.rds\")\nshapes <- readRDS(\"metrotransit-data/rds/shapes.rds\")\n\n\n# Get the shape for a particular route. This isn't perfect. Each route has a\n# large number of different trips, and each trip can have a different shape.\n# This function simply returns the most commonly-used shape across all trips for\n# a particular route.\nget_route_shape <- function(route) {\n  routeid <- paste0(route, \"-75\")\n\n  # For this route, get all the shape_ids listed in trips, and a count of how\n  # many times each shape is used. We'll just pick the most commonly-used shape.\n  shape_counts <- trips %>%\n    filter(route_id == routeid) %>%\n    group_by(shape_id) %>%\n    summarise(n = n()) %>%\n    arrange(-n)\n\n  shapeid <- shape_counts$shape_id[1]\n\n  # Get the coordinates for the shape_id\n  shapes %>% filter(shape_id == shapeid)\n}\n\n\nfunction(input, output, session) {\n\n  # Route select input box\n  output$routeSelect <- renderUI({\n    live_vehicles <- getMetroData(\"VehicleLocations/0\")\n\n    routeNums <- sort(unique(as.numeric(live_vehicles$Route)))\n    # Add names, so that we can add all=0\n    names(routeNums) <- routeNums\n    routeNums <- c(All = 0, routeNums)\n    selectInput(\"routeNum\", \"Route\", choices = routeNums, selected = routeNums[2])\n  })\n\n  # Locations of all active vehicles\n  vehicleLocations <- reactive({\n    input$refresh # Refresh if button clicked\n\n    # Get interval (minimum 30)\n    interval <- max(as.numeric(input$interval), 30)\n    # Invalidate this reactive after the interval has passed, so that data is\n    # fetched again.\n    invalidateLater(interval * 1000, session)\n\n    getMetroData(\"VehicleLocations/0\")\n  })\n\n  # Locations of vehicles for a particular route\n  routeVehicleLocations <- reactive({\n    if (is.null(input$routeNum))\n      return()\n\n    locations <- vehicleLocations()\n\n    if (as.numeric(input$routeNum) == 0)\n      return(locations)\n\n    locations[locations$Route == input$routeNum, ]\n  })\n\n  # Get time that vehicles locations were updated\n  lastUpdateTime <- reactive({\n    vehicleLocations() # Trigger this reactive when vehicles locations are updated\n    Sys.time()\n  })\n\n  # Number of seconds since last update\n  output$timeSinceLastUpdate <- renderUI({\n    # Trigger this every 5 seconds\n    invalidateLater(5000, session)\n    p(\n      class = \"text-muted\",\n      \"Data refreshed \",\n      round(difftime(Sys.time(), lastUpdateTime(), units=\"secs\")),\n      \" seconds ago.\"\n    )\n  })\n\n  output$numVehiclesTable <- renderUI({\n    locations <- routeVehicleLocations()\n    if (length(locations) == 0 || nrow(locations) == 0)\n      return(NULL)\n\n    # Create a Bootstrap-styled table\n    tags$table(class = \"table\",\n      tags$thead(tags$tr(\n        tags$th(\"Color\"),\n        tags$th(\"Direction\"),\n        tags$th(\"Number of vehicles\")\n      )),\n      tags$tbody(\n        tags$tr(\n          tags$td(span(style = sprintf(\n            \"width:1.1em; height:1.1em; background-color:%s; display:inline-block;\",\n            dirColors[4]\n          ))),\n          tags$td(\"Northbound\"),\n          tags$td(nrow(locations[locations$Direction == \"4\",]))\n        ),\n        tags$tr(\n          tags$td(span(style = sprintf(\n            \"width:1.1em; height:1.1em; background-color:%s; display:inline-block;\",\n            dirColors[1]\n          ))),\n          tags$td(\"Southbound\"),\n          tags$td(nrow(locations[locations$Direction == \"1\",]))\n        ),\n        tags$tr(\n          tags$td(span(style = sprintf(\n            \"width:1.1em; height:1.1em; background-color:%s; display:inline-block;\",\n            dirColors[2]\n          ))),\n          tags$td(\"Eastbound\"),\n          tags$td(nrow(locations[locations$Direction == \"2\",]))\n        ),\n        tags$tr(\n          tags$td(span(style = sprintf(\n            \"width:1.1em; height:1.1em; background-color:%s; display:inline-block;\",\n            dirColors[3]\n          ))),\n          tags$td(\"Westbound\"),\n          tags$td(nrow(locations[locations$Direction == \"3\",]))\n        ),\n        tags$tr(class = \"active\",\n          tags$td(),\n          tags$td(\"Total\"),\n          tags$td(nrow(locations))\n        )\n      )\n    )\n  })\n\n  # Store last zoom button value so we can detect when it's clicked\n  lastZoomButtonValue <- NULL\n\n  output$busmap <- renderLeaflet({\n    locations <- routeVehicleLocations()\n    if (length(locations) == 0)\n      return(NULL)\n\n    # Show only selected directions\n    locations <- filter(locations, Direction %in% as.numeric(input$directions))\n\n    # Four possible directions for bus routes\n    dirPal <- colorFactor(dirColors, names(dirColors))\n\n    map <- leaflet(locations) %>%\n      addTiles('http://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png') %>%\n      addCircleMarkers(\n        ~VehicleLongitude,\n        ~VehicleLatitude,\n        color = ~dirPal(Direction),\n        opacity = 0.8,\n        radius = 8\n      )\n\n    if (as.numeric(input$routeNum) != 0) {\n      route_shape <- get_route_shape(input$routeNum)\n\n      map <- addPolylines(map,\n        route_shape$shape_pt_lon,\n        route_shape$shape_pt_lat,\n        fill = FALSE\n      )\n    }\n\n    rezoom <- \"first\"\n    # If zoom button was clicked this time, and store the value, and rezoom\n    if (!identical(lastZoomButtonValue, input$zoomButton)) {\n      lastZoomButtonValue <<- input$zoomButton\n      rezoom <- \"always\"\n    }\n\n    map <- map %>% mapOptions(zoomToLimits = rezoom)\n\n    map\n  })\n}\n",
    "created" : 1477109808732.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3568756859",
    "id" : "247398C8",
    "lastKnownWriteTime" : 1477109412,
    "last_content_update" : 1477109412,
    "path" : "~/Documents/Github/findHome/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}